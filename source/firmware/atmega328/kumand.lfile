
AVRASM ver. 2.2.7  kumand.asm Mon Oct 01 01:25:28 2018

kumand.asm(1): Including file 'm328pdef.inc'
kumand.asm(1): Including file 'm328pdef.inc'
                                 
                                 
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega328P.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m328Pdef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega328P
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega328P
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M328PDEF_INC_
                                 #define _M328PDEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega328P
                                 #pragma AVRPART ADMIN PART_NAME ATmega328P
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x95
                                 .equ	SIGNATURE_002	= 0x0f
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	UDR0	= 0xc6	; MEMORY MAPPED
                                 .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
                                 .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
                                 .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
                                 .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
                                 .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
                                 .equ	TWAMR	= 0xbd	; MEMORY MAPPED
                                 .equ	TWCR	= 0xbc	; MEMORY MAPPED
                                 .equ	TWDR	= 0xbb	; MEMORY MAPPED
                                 .equ	TWAR	= 0xba	; MEMORY MAPPED
                                 .equ	TWSR	= 0xb9	; MEMORY MAPPED
                                 .equ	TWBR	= 0xb8	; MEMORY MAPPED
                                 .equ	ASSR	= 0xb6	; MEMORY MAPPED
                                 .equ	OCR2B	= 0xb4	; MEMORY MAPPED
                                 .equ	OCR2A	= 0xb3	; MEMORY MAPPED
                                 .equ	TCNT2	= 0xb2	; MEMORY MAPPED
                                 .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
                                 .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
                                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                                 .equ	TIMSK2	= 0x70	; MEMORY MAPPED
                                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                                 .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
                                 .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
                                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                                 .equ	PRR	= 0x64	; MEMORY MAPPED
                                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	SPMCSR	= 0x37
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUSR	= 0x34
                                 .equ	SMCR	= 0x33
                                 .equ	ACSR	= 0x30
                                 .equ	SPDR	= 0x2e
                                 .equ	SPSR	= 0x2d
                                 .equ	SPCR	= 0x2c
                                 .equ	GPIOR2	= 0x2b
                                 .equ	GPIOR1	= 0x2a
                                 .equ	OCR0B	= 0x28
                                 .equ	OCR0A	= 0x27
                                 .equ	TCNT0	= 0x26
                                 .equ	TCCR0B	= 0x25
                                 .equ	TCCR0A	= 0x24
                                 .equ	GTCCR	= 0x23
                                 .equ	EEARH	= 0x22
                                 .equ	EEARL	= 0x21
                                 .equ	EEDR	= 0x20
                                 .equ	EECR	= 0x1f
                                 .equ	GPIOR0	= 0x1e
                                 .equ	EIMSK	= 0x1d
                                 .equ	EIFR	= 0x1c
                                 .equ	PCIFR	= 0x1b
                                 .equ	TIFR2	= 0x17
                                 .equ	TIFR1	= 0x16
                                 .equ	TIFR0	= 0x15
                                 .equ	PORTD	= 0x0b
                                 .equ	DDRD	= 0x0a
                                 .equ	PIND	= 0x09
                                 .equ	PORTC	= 0x08
                                 .equ	DDRC	= 0x07
                                 .equ	PINC	= 0x06
                                 .equ	PORTB	= 0x05
                                 .equ	DDRB	= 0x04
                                 .equ	PINB	= 0x03
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** USART0 ***********************
                                 ; UDR0 - USART I/O Data Register
                                 .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                                 .equ	U2X0	= 1	; Double the USART transmission speed
                                 .equ	UPE0	= 2	; Parity Error
                                 .equ	DOR0	= 3	; Data overRun
                                 .equ	FE0	= 4	; Framing Error
                                 .equ	UDRE0	= 5	; USART Data Register Empty
                                 .equ	TXC0	= 6	; USART Transmitt Complete
                                 .equ	RXC0	= 7	; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0	; Transmit Data Bit 8
                                 .equ	RXB80	= 1	; Receive Data Bit 8
                                 .equ	UCSZ02	= 2	; Character Size
                                 .equ	TXEN0	= 3	; Transmitter Enable
                                 .equ	RXEN0	= 4	; Receiver Enable
                                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0	; Clock Polarity
                                 .equ	UCSZ00	= 1	; Character Size
                                 .equ	UCPHA0	= UCSZ00	; For compatibility
                                 .equ	UCSZ01	= 2	; Character Size
                                 .equ	UDORD0	= UCSZ01	; For compatibility
                                 .equ	USBS0	= 3	; Stop Bit Select
                                 .equ	UPM00	= 4	; Parity Mode Bit 0
                                 .equ	UPM01	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL00	= 6	; USART Mode Select
                                 .equ	UMSEL0	= UMSEL00	; For compatibility
                                 .equ	UMSEL01	= 7	; USART Mode Select
                                 .equ	UMSEL1	= UMSEL01	; For compatibility
                                 
                                 ; UBRR0H - USART Baud Rate Register High Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR0L - USART Baud Rate Register Low Byte
                                 .equ	_UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	_UBRR1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWAMR - TWI (Slave) Address Mask Register
                                 .equ	TWAM0	= 1	; 
                                 .equ	TWAMR0	= TWAM0	; For compatibility
                                 .equ	TWAM1	= 2	; 
                                 .equ	TWAMR1	= TWAM1	; For compatibility
                                 .equ	TWAM2	= 3	; 
                                 .equ	TWAMR2	= TWAM2	; For compatibility
                                 .equ	TWAM3	= 4	; 
                                 .equ	TWAMR3	= TWAM3	; For compatibility
                                 .equ	TWAM4	= 5	; 
                                 .equ	TWAMR4	= TWAM4	; For compatibility
                                 .equ	TWAM5	= 6	; 
                                 .equ	TWAMR5	= TWAM5	; For compatibility
                                 .equ	TWAM6	= 7	; 
                                 .equ	TWAMR6	= TWAM6	; For compatibility
                                 
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK1 - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1A	= 1	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	OCIE1B	= 2	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR1 - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1A	= 1	; Output Compare Flag 1A
                                 .equ	OCF1B	= 2	; Output Compare Flag 1B
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Comparet Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter1 Control Register C
                                 .equ	FOC1B	= 6	; 
                                 .equ	FOC1A	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	TOIE2A	= TOIE2	; For compatibility
                                 .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
                                 .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2A	= 1	; Output Compare Flag 2A
                                 .equ	OCF2B	= 2	; Output Compare Flag 2B
                                 
                                 ; TCCR2A - Timer/Counter2 Control Register A
                                 .equ	WGM20	= 0	; Waveform Genration Mode
                                 .equ	WGM21	= 1	; Waveform Genration Mode
                                 .equ	COM2B0	= 4	; Compare Output Mode bit 0
                                 .equ	COM2B1	= 5	; Compare Output Mode bit 1
                                 .equ	COM2A0	= 6	; Compare Output Mode bit 1
                                 .equ	COM2A1	= 7	; Compare Output Mode bit 1
                                 
                                 ; TCCR2B - Timer/Counter2 Control Register B
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM22	= 3	; Waveform Generation Mode
                                 .equ	FOC2B	= 6	; Force Output Compare B
                                 .equ	FOC2A	= 7	; Force Output Compare A
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2A - Timer/Counter2 Output Compare Register A
                                 .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; OCR2B - Timer/Counter2 Output Compare Register B
                                 .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
                                 .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
                                 .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
                                 .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 5	; Asynchronous Timer/Counter2
                                 .equ	EXCLK	= 6	; Enable External Clock Input
                                 
                                 ; GTCCR - General Timer Counter Control register
                                 .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PSR2	= PSRASY	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register A
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCSRB - The ADC Control and Status register B
                                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                                 .equ	ACME	= 6	; 
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; DIDR0 - Digital Input Disable Register
                                 .equ	ADC0D	= 0	; 
                                 .equ	ADC1D	= 1	; 
                                 .equ	ADC2D	= 2	; 
                                 .equ	ADC3D	= 3	; 
                                 .equ	ADC4D	= 4	; 
                                 .equ	ADC5D	= 5	; 
                                 
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 ; DIDR1 - Digital Input Disable Register 1
                                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                                 
                                 ; TCCR0A - Timer/Counter  Control Register A
                                 .equ	WGM00	= 0	; Waveform Generation Mode
                                 .equ	WGM01	= 1	; Waveform Generation Mode
                                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                                 
                                 ; TCCR0B - Timer/Counter Control Register B
                                 .equ	CS00	= 0	; Clock Select
                                 .equ	CS01	= 1	; Clock Select
                                 .equ	CS02	= 2	; Clock Select
                                 .equ	WGM02	= 3	; 
                                 .equ	FOC0B	= 6	; Force Output Compare B
                                 .equ	FOC0A	= 7	; Force Output Compare A
                                 
                                 ; TCNT0 - Timer/Counter0
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0A - Timer/Counter0 Output Compare Register
                                 .equ	OCR0A_0	= 0	; 
                                 .equ	OCR0A_1	= 1	; 
                                 .equ	OCR0A_2	= 2	; 
                                 .equ	OCR0A_3	= 3	; 
                                 .equ	OCR0A_4	= 4	; 
                                 .equ	OCR0A_5	= 5	; 
                                 .equ	OCR0A_6	= 6	; 
                                 .equ	OCR0A_7	= 7	; 
                                 
                                 ; OCR0B - Timer/Counter0 Output Compare Register
                                 .equ	OCR0B_0	= 0	; 
                                 .equ	OCR0B_1	= 1	; 
                                 .equ	OCR0B_2	= 2	; 
                                 .equ	OCR0B_3	= 3	; 
                                 .equ	OCR0B_4	= 4	; 
                                 .equ	OCR0B_5	= 5	; 
                                 .equ	OCR0B_6	= 6	; 
                                 .equ	OCR0B_7	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 ;.equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	PSR10	= PSRSYNC	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register
                                 .equ	ISC00	= 0	; External Interrupt Sense Control 0 Bit 0
                                 .equ	ISC01	= 1	; External Interrupt Sense Control 0 Bit 1
                                 .equ	ISC10	= 2	; External Interrupt Sense Control 1 Bit 0
                                 .equ	ISC11	= 3	; External Interrupt Sense Control 1 Bit 1
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 
                                 ; PCICR - Pin Change Interrupt Control Register
                                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                                 .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
                                 .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
                                 
                                 ; PCMSK2 - Pin Change Mask Register 2
                                 .equ	PCINT16	= 0	; Pin Change Enable Mask 16
                                 .equ	PCINT17	= 1	; Pin Change Enable Mask 17
                                 .equ	PCINT18	= 2	; Pin Change Enable Mask 18
                                 .equ	PCINT19	= 3	; Pin Change Enable Mask 19
                                 .equ	PCINT20	= 4	; Pin Change Enable Mask 20
                                 .equ	PCINT21	= 5	; Pin Change Enable Mask 21
                                 .equ	PCINT22	= 6	; Pin Change Enable Mask 22
                                 .equ	PCINT23	= 7	; Pin Change Enable Mask 23
                                 
                                 ; PCMSK1 - Pin Change Mask Register 1
                                 .equ	PCINT8	= 0	; Pin Change Enable Mask 8
                                 .equ	PCINT9	= 1	; Pin Change Enable Mask 9
                                 .equ	PCINT10	= 2	; Pin Change Enable Mask 10
                                 .equ	PCINT11	= 3	; Pin Change Enable Mask 11
                                 .equ	PCINT12	= 4	; Pin Change Enable Mask 12
                                 .equ	PCINT13	= 5	; Pin Change Enable Mask 13
                                 .equ	PCINT14	= 6	; Pin Change Enable Mask 14
                                 
                                 ; PCMSK0 - Pin Change Mask Register 0
                                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                                 
                                 ; PCIFR - Pin Change Interrupt Flag Register
                                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                                 .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
                                 .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCSR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; CLKPR - Clock Prescale Register
                                 .equ	CLKPS0	= 0	; Clock Prescaler Select Bit 0
                                 .equ	CLKPS1	= 1	; Clock Prescaler Select Bit 1
                                 .equ	CLKPS2	= 2	; Clock Prescaler Select Bit 2
                                 .equ	CLKPS3	= 3	; Clock Prescaler Select Bit 3
                                 .equ	CLKPCE	= 7	; Clock Prescaler Change Enable
                                 
                                 ; SPMCSR - Store Program Memory Control and Status Register
                                 .equ    SELFPRGEN = 0; Added for backwards compatibility
                                 .equ	SPMEN	= 0	; Store Program Memory
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read-While-Write section read enable
                                 .equ    SIGRD   = 5 ; Signature Row Read
                                 .equ	RWWSB	= 6	; Read-While-Write Section Busy
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; 
                                 .equ	IVSEL	= 1	; 
                                 .equ	PUD	= 4	; 
                                 .equ	BODSE	= 5	; BOD Sleep Enable
                                 .equ	BODS	= 6	; BOD Sleep
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	EXTREF	= EXTRF	; For compatibility
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 
                                 ; SMCR - Sleep Mode Control Register
                                 .equ	SE	= 0	; Sleep Enable
                                 .equ	SM0	= 1	; Sleep Mode Select Bit 0
                                 .equ	SM1	= 2	; Sleep Mode Select Bit 1
                                 .equ	SM2	= 3	; Sleep Mode Select Bit 2
                                 
                                 ; GPIOR2 - General Purpose I/O Register 2
                                 .equ	GPIOR20	= 0	; 
                                 .equ	GPIOR21	= 1	; 
                                 .equ	GPIOR22	= 2	; 
                                 .equ	GPIOR23	= 3	; 
                                 .equ	GPIOR24	= 4	; 
                                 .equ	GPIOR25	= 5	; 
                                 .equ	GPIOR26	= 6	; 
                                 .equ	GPIOR27	= 7	; 
                                 
                                 ; GPIOR1 - General Purpose I/O Register 1
                                 .equ	GPIOR10	= 0	; 
                                 .equ	GPIOR11	= 1	; 
                                 .equ	GPIOR12	= 2	; 
                                 .equ	GPIOR13	= 3	; 
                                 .equ	GPIOR14	= 4	; 
                                 .equ	GPIOR15	= 5	; 
                                 .equ	GPIOR16	= 6	; 
                                 .equ	GPIOR17	= 7	; 
                                 
                                 ; GPIOR0 - General Purpose I/O Register 0
                                 .equ	GPIOR00	= 0	; 
                                 .equ	GPIOR01	= 1	; 
                                 .equ	GPIOR02	= 2	; 
                                 .equ	GPIOR03	= 3	; 
                                 .equ	GPIOR04	= 4	; 
                                 .equ	GPIOR05	= 5	; 
                                 .equ	GPIOR06	= 6	; 
                                 .equ	GPIOR07	= 7	; 
                                 
                                 ; PRR - Power Reduction Register
                                 .equ	PRADC	= 0	; Power Reduction ADC
                                 .equ	PRUSART0	= 1	; Power Reduction USART
                                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                                 .equ	PRTWI	= 7	; Power Reduction TWI
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEARL - EEPROM Address Register Low Byte
                                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                                 
                                 ; EEARH - EEPROM Address Register High Byte
                                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                                 
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEPE	= 1	; EEPROM Write Enable
                                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	CKOUT	= 6	; Clock output
                                 .equ	CKDIV8	= 7	; Divide clock by 8
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select reset vector
                                 .equ	BOOTSZ0	= 1	; Select boot size
                                 .equ	BOOTSZ1	= 2	; Select boot size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	WDTON	= 4	; Watchdog Timer Always On
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	DWEN	= 6	; debugWIRE Enable
                                 .equ	RSTDISBL	= 7	; External reset disable
                                 
                                 ; EXTENDED fuse bits
                                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x3fff	; Note: Word address
                                 .equ	IOEND	= 0x00ff
                                 .equ	SRAM_START	= 0x0100
                                 .equ	SRAM_SIZE	= 2048
                                 .equ	RAMEND	= 0x08ff
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x03ff
                                 .equ	EEPROMEND	= 0x03ff
                                 .equ	EEADRBITS	= 10
                                 #pragma AVRPART MEMORY PROG_FLASH 32768
                                 #pragma AVRPART MEMORY EEPROM 1024
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 2048
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x3800
                                 .equ	NRWW_STOP_ADDR	= 0x3fff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x37ff
                                 .equ	PAGESIZE	= 64
                                 .equ	FIRSTBOOTSTART	= 0x3f00
                                 .equ	SECONDBOOTSTART	= 0x3e00
                                 .equ	THIRDBOOTSTART	= 0x3c00
                                 .equ	FOURTHBOOTSTART	= 0x3800
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	PCI0addr	= 0x0006	; Pin Change Interrupt Request 0
                                 .equ	PCI1addr	= 0x0008	; Pin Change Interrupt Request 0
                                 .equ	PCI2addr	= 0x000a	; Pin Change Interrupt Request 1
                                 .equ	WDTaddr	= 0x000c	; Watchdog Time-out Interrupt
                                 .equ	OC2Aaddr	= 0x000e	; Timer/Counter2 Compare Match A
                                 .equ	OC2Baddr	= 0x0010	; Timer/Counter2 Compare Match A
                                 .equ	OVF2addr	= 0x0012	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0014	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0016	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0018	; Timer/Counter1 Compare Match B
                                 .equ	OVF1addr	= 0x001a	; Timer/Counter1 Overflow
                                 .equ	OC0Aaddr	= 0x001c	; TimerCounter0 Compare Match A
                                 .equ	OC0Baddr	= 0x001e	; TimerCounter0 Compare Match B
                                 .equ	OVF0addr	= 0x0020	; Timer/Couner0 Overflow
                                 .equ	SPIaddr	= 0x0022	; SPI Serial Transfer Complete
                                 .equ	URXCaddr	= 0x0024	; USART Rx Complete
                                 .equ	UDREaddr	= 0x0026	; USART, Data Register Empty
                                 .equ	UTXCaddr	= 0x0028	; USART Tx Complete
                                 .equ	ADCCaddr	= 0x002a	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x002c	; EEPROM Ready
                                 .equ	ACIaddr	= 0x002e	; Analog Comparator
                                 .equ	TWIaddr	= 0x0030	; Two-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0032	; Store Program Memory Read
                                 
                                 .equ	INT_VECTORS_SIZE	= 52	; size in words
                                 
                                 #endif  /* _M328PDEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 .dseg
                                 
                                 // Allocate 32 bytes of memory on SRAM for UART Transmit.
000100                           UART_TRANSMIT_BUFFER:	.byte 32
                                 // Allocate 32 bytes of memory on SRAM for UART Receive.
000120                           UART_RECEIVE_BUFFER:	.byte 32
                                 
                                 .cseg
                                 
000000 c000                      .org 0x0000 rjmp RESET // Reset Handler
                                 //.org 0x0002 rjmp INT0 // IRQ0
                                 //.org 0x0004 rjmp INT1 // IRQ1
                                 //.org 0x0006 rjmp PCINT0 // PCINT0
                                 //.org 0x0008 rjmp PCINT1 // PCINT1
                                 //.org 0x000A rjmp PCINT2 // PCINT2
                                 //.org 0x000C rjmp WDT // Watchdog Timeout
                                 //.org 0x000E rjmp TIM2_COMPA // Timer2 CompareA
                                 //.org 0x0010 rjmp TIM2_COMPB // Timer2 CompareB
                                 //.org 0x0012 rjmp TIM2_OVF // Timer2 Overflow
                                 //.org 0x0014 rjmp TIM1_CAPT // Timer1 Capture
                                 //.org 0x0016 rjmp TIM1_COMPA // Timer1 CompareA
                                 //.org 0x0018 rjmp TIM1_COMPB // Timer1 CompareB
                                 //.org 0x001A rjmp TIM1_OVF // Timer1 Overflow
                                 //.org 0x001C rjmp TIM0_COMPA // Timer0 CompareA
                                 //.org 0x001E rjmp TIM0_COMPB // Timer0 CompareB
                                 //.org 0x0020 rjmp TIM0_OVF // Timer0 Overflow
                                 //.org 0x0022 rjmp SPI_STC // SPI Transfer Complete
                                 //.org 0x0024 rjmp UART_RXC // UART RX Complete
                                 //.org 0x0026 rjmp UART_UDRE // UART UDR Empty
                                 //.org 0x0028 rjmp UART_TXC // UART TX Complete
                                 //.org 0x002A rjmp ADC // ADC Conversion Complete
                                 //.org 0x002C rjmp EE_RDY // EEPROM Ready
                                 //.org 0x002E rjmp ANA_COMP // Analog Comparator
                                 //.org 0x0030 rjmp TWI // 2-wire Serial
                                 //.org 0x0032 rjmp SPM_RDY // SPM Ready
                                 
                                 .equ PORTB_MASK = 0b00111111
                                 .equ PORTC_MASK = 0b00100111
                                 .equ PORTD_MASK = 0b11101100
                                 
                                 .equ GET_WLAN_STATUS = 0x02
                                 .equ GET_PC_STATUS = 0x03
                                 .equ SEND_KEY = 0x04
                                 .equ SET_DESTINATION_IP = 0x05
                                 .equ RUN_WPSPBC = 0x0A
                                 .equ GET_DESTINATION_IP = 0x0B
                                 
                                 
                                 .macro eepromWrite
                                 	// Load the address of the string to be sent, to r16:r17
                                 	ldi r17, high(@0)
                                 	ldi r16, low(@0)
                                 
                                 	// Push the address to stack and call EEPROM_Write function
                                 	push r16
                                 	push r17
                                 	rcall EEPROM_Write
                                 	pop r17
                                 	pop r16
                                 
                                 .endmacro
                                 
                                 .macro eepromRead
                                 	// Load the address of the string to be read, to r16:r17
                                 	ldi r17, high(@0)
                                 	ldi r16, low(@0)
                                 
                                 	// Push the address to stack and call EEPROM_Read function
                                 	push r16
                                 	push r17
                                 	rcall EEPROM_Read
                                 	pop r17
                                 	pop r16
                                 
                                 .endmacro
                                 
                                 
                                 RESET:						
                                 							// Initialize Stack Pointer
000001 e008                      							ldi r16, high(RAMEND)
000002 bf0e                      							out SPH, r16 
000003 ef0f                      							ldi r16, low(RAMEND) 
000004 bf0d                      							out SPL, r16 
                                 
                                 							// Initialize GPIO
000005 d009                      							rcall GPIO_Init
                                 
                                 							// Initialize UART
000006 d015                      							rcall UART_Init
                                 
                                 							// Set r8 to 0xFF as a refrence
000007 ef0f                      							ldi r16, 0xFF
000008 2e80                      							mov r8, r16
000009 2700                      							clr r16
                                 							
                                 							// Ignore incoming garbage and wait for the response 0x01
00000a d02c                      							rcall UART_Receive_Byte
00000b 3001                      							cpi r16, 0x01
00000c f7e9                      							brne PC-2
                                 
                                 							// Send destination IP
00000d d081                      							rcall IP_SYNC
                                 
00000e c08f                      							rjmp MAIN
                                 
                                 GPIO_Init:
                                 							// Set PORTB pins 0, 1, 2, 3, 4, 5 as INPUT
00000f e000                      							ldi r16, (0<<PB0) | (0<<PB1) | (0<<PB2) | (0<<PB3) | (0<<PB4) | (0<<PB5)
000010 b904                      							out DDRB, r16
                                 							
                                 							// Internal pull-up for PORTB pins 0, 1, 2, 3, 4, 5
000011 e30f                      							ldi r16, (1<<PB0) | (1<<PB1) | (1<<PB2) | (1<<PB3) | (1<<PB4) | (1<<PB5)
000012 b905                      							out PORTB, r16
                                 							
                                 							// Set PORTC pins 0, 1, 2, 5 as INPUT
                                 							//	3, 4 as OUTPUT
000013 e108                      							ldi r16, (0<<PC0) | (0<<PC1) | (0<<PC2) | (1<<PC3) | (1<<PC4) | (0<<PC5)
000014 b907                      							out DDRC, r16
                                 							
                                 							// Internal pull-up for PORTC pins 0, 1, 2, 5
                                 							//	Pins 3,4 driven low
000015 e207                      							ldi r16, (1<<PC0) | (1<<PC1) | (1<<PC2) | (0<<PC3) | (0<<PC4) | (1<<PC5) 
000016 b908                      							out PORTC, r16
                                 							
                                 							// Set PORTD pins 2, 3, 5, 6, 7 as INPUT
000017 e000                      							ldi r16, (0<<PD2) | (0<<PD3) | (0<<PD5) | (0<<PD6) | (0<<PD7)
000018 b90a                      							out DDRD, r16
                                 							
                                 							// Internal pull-up for PORTD pins 2, 3, 4, 5, 6, 7
000019 ee0c                      							ldi r16, (1<<PD2) | (1<<PD3) | (1<<PD5) | (1<<PD6) | (1<<PD7)
00001a b90b                      							out PORTD, r16
                                 							
00001b 9508                      							ret
                                 
                                 UART_Init:			
                                 							// UBRR0 = 0x003 for 115.2K baudrate at 7.3728MHz.
                                 							// Load 0x003 to UBRR0(USART Baud Rate Register)
00001c e010                      							ldi r17, 0x0
00001d e003                      							ldi r16, 0x03
00001e 9310 00c5                 							sts UBRR0H, r17
000020 9300 00c4                 							sts UBRR0L, r16
                                 							
                                 							// Enable Receiver and Transmitter in UCSR0B(USART Control and Status Register 0B)
                                 							// Normal port operations overriden!
000022 e108                      							ldi r16, (1<<RXEN0) | (1<<TXEN0) 
000023 9300 00c1                 							sts UCSR0B, r16
                                 							
                                 							// Set UCSR0C(USART Control and Status Register 0C) = 0x06
                                 							// Frame format: 8 data bit, 1 stop bit, no parity.
000025 e006                      							ldi r16, (0<<USBS0) | (3<<UCSZ00)
000026 9300 00c2                 							sts UCSR0C, r16
                                 							
000028 9508                      							ret
                                 
                                 UART_Transmit_Byte:
                                 							// This function transmits a single byte stored in r16 over UART 
                                 							// Wait for UDRE0 (USART Data Register Empty) bit is set in USART Control and Status Register
000029 9110 00c0                 							lds r17, UCSR0A
00002b ff15                      							sbrs r17, UDRE0
00002c cffc                      							rjmp UART_Transmit_Byte
                                 							
                                 							// Load byte stored in r16 to buffer and send byte
                                 							// Data will be sent and UDR0(USART I/O Data Register) will be cleared automatically after load into it
00002d 9300 00c6                 							sts UDR0, r16
                                 							
00002f 9508                      	UART_Transmit_Byte_Ret:	ret
                                 
                                 UART_Transmit_Str:	
                                 							// The data being stored in buffer called UART_TRANSMIT_BUFFER will be sent
                                 							// Load buffer address to register X
000030 e0b1                      							ldi XH, high(UART_TRANSMIT_BUFFER)
000031 e0a0                      							ldi XL, low(UART_TRANSMIT_BUFFER)
                                 
                                 	UART_Transmit_Str_Loop:	// Load data stored in buffer into r16 and transmit
                                 							// Termination character is included.
000032 910d                      							ld r16, X+
000033 dff5                      							rcall UART_Transmit_Byte
                                 
                                 							// If data is not null-termination byte, continue transmitting
000034 3000                      							cpi r16, '\0'
000035 f7e1                      							brne UART_Transmit_Str_Loop
                                 
000036 9508                      	UART_Transmit_Str_Ret:	ret
                                 
                                 UART_Receive_Byte:
                                 							// This function receives a single byte over UART and store it in r16
                                 							// Wait for RXC0 (USART Receive Complete) bit is set in USART Control and Status Register
000037 9110 00c0                 							lds r17, UCSR0A
000039 ff17                      							sbrs r17, RXC0
00003a cffc                      							rjmp UART_Receive_Byte
                                 							
                                 							// Receive data and store it in register r16 
                                 							// UDR0(USART I/O Data Register) will be cleared automatically after reading from it
00003b 9100 00c6                 							lds r16, UDR0
                                 							
00003d 9508                      	UART_Receive_Byte_Ret:	ret
                                 
                                 UART_Receive_Str:
                                 							// The received data will be stored in buffer called UART_RECEIVE_BUFFER allocated in SRAM.
                                 							// Load buffer address to register X
00003e e0b1                      							ldi XH, high(UART_RECEIVE_BUFFER)
00003f e2a0                      							ldi XL, low(UART_RECEIVE_BUFFER)
                                 							
                                 	UART_Receive_Str_Loop:	// Receive byte and store it in buffer and post-increment buffer address
                                 							// Termination character is included.
000040 dff6                      							rcall UART_Receive_Byte
000041 930d                      							st X+, r16
                                 
                                 							// If data is not null-termination byte, continue receiving
000042 3000                      							cpi r16, '\0'
000043 f7e1                      							brne UART_Receive_Str_Loop
                                 							
000044 9508                      	UART_Receive_Str_Ret:	ret
                                 
                                 EEPROM_Read:
                                 							// Load Stack Pointer to register Z
000045 b7fe                      							in ZH, SPH
000046 b7ed                      							in ZL, SPL
                                 
                                 							// EEPROM addres that will be read is in SP+3 and SP+4, high byte and low byte, respectively
                                 							// Load EEPROM address to register X
000047 81b3                      							ldd XH, Z+3
000048 81a4                      							ldd XL, Z+4
                                 
                                 							// the read data will be stored in buffer allocated in SRAM
                                 							// Load buffer address to register Y
000049 e0d1                      							ldi YH, high(UART_TRANSMIT_BUFFER)
00004a e0c0                      							ldi YL, low(UART_TRANSMIT_BUFFER)
                                 
                                 	EEPROM_Read_Loop:		// Wait for EEPROM to be ready
00004b 99f9                      							sbic EECR, EEPE
00004c cffe                      							rjmp EEPROM_Read_Loop
                                 
                                 							// Set the EEPROM Address Register to address to be read
00004d bdb2                      							out EEARH, XH
00004e bda1                      							out EEARL, XL
00004f 9611                      							adiw X, 1 // Post-Increment
                                 
                                 							// Read data(byte) from current address by writing EEPROM Read Enable(EERE) bit in EEPROM Control Register (EECR)
000050 9af8                      							sbi EECR, EERE
                                 
                                 							// Read data from EEPROM Data Register
                                 							// EEDR will be cleared automatically after reading from it
000051 b500                      							in 	r16, EEDR
                                 
                                 							// Store data in buffer and post-increment buffer address
                                 							// Termination character included
000052 9309                      							st Y+, r16
                                 
                                 							// If data is not null-termination byte, continue reading
000053 3000                      							cpi r16, '\0'
000054 f7b1                      							brne EEPROM_Read_Loop
                                 
                                 							// Restore the Stack Pointer and return
000055 bffe                      	EEPROM_Read_Return:		out SPH, ZH
000056 bfed                      							out SPL, ZL
000057 9508                      							ret
                                 
                                 EEPROM_Write:
                                 							// Load Stack Pointer to register Z
000058 b7fe                      							in ZH, SPH
000059 b7ed                      							in ZL, SPL
                                 
                                 							// EEPROM addres that will be read is in SP+3 and SP+4, high byte and low byte, respectively
                                 							// Load EEPROM address to register X
00005a 81b3                      							ldd XH, Z+3
00005b 81a4                      							ldd XL, Z+4
                                 
                                 							// the read data will be stored in buffer allocated in SRAM
                                 							// Load buffer address to register Y
00005c e0d1                      							ldi YH, high(UART_RECEIVE_BUFFER)
00005d e2c0                      							ldi YL, low(UART_RECEIVE_BUFFER)
                                 
                                 	EEPROM_Write_Loop:		// Wait for EEPROM to be ready
00005e 99f9                      							sbic EECR, EEPE
00005f cffe                      							rjmp EEPROM_Write_Loop
                                 
                                 							// Set the EEPROM Address Register to address to be written
000060 bdb2                      							out EEARH, XH
000061 bda1                      							out EEARL, XL
000062 9611                      							adiw X, 1 // Post-Increment
                                 
                                 							// Load data stored in buffer to r16
000063 9109                      							ld r16, Y+
                                 
                                 							// Write data to EEDR (EEPROM Data Register)
000064 bd00                      							out EEDR, r16
                                 
                                 							// Set EEMPE(EEPROM Master Write Enable) bit and in EEPROM Control Register
000065 9afa                      							sbi EECR, EEMPE
                                 
                                 							// Enable writing by setting EEPE(EEPROM Write Enable) bit in EEPROM Control Register
                                 							// Data will be written after this instruction
000066 9af9                      							sbi EECR, EEPE
                                 
                                 							// If data is not null-termination byte, continue writing
000067 3000                      							cpi r16, '\0'
000068 f7a9                      							brne EEPROM_Write_Loop
                                 
                                 							// Restore Stack Pointer and return
000069 bffe                      	EEPROM_Write_Ret:		out SPH, ZH
00006a bfed                      							out SPL, ZL
00006b 9508                      							ret
                                 
                                 FN_Toggle:
                                 							// Toggle FN led
00006c 9a33                      							sbi PINC, 3
00006d d06a                      							rcall DELAY_300ms
00006e c02f                      							rjmp MAIN
                                 
                                 WPS:
                                 							// AND the r13 with PORTC_MASK, all bits taken out except FN
00006f e048                      							ldi r20, PORTC_MASK - 31
000070 22d4                      							and r13, r20
                                 
                                 							// Load the command GET_WLAN_STATUS to r16 and transmit byte
000071 e002                      							ldi r16, GET_WLAN_STATUS
000072 0d0d                      							add r16, r13
000073 dfb5                      							rcall UART_Transmit_Byte
                                 
                                 							// Toggle FN, if it is on
000074 fcd3                      							sbrc r13, 3
000075 9a33                      							sbi PINC, 3
                                 
                                 							// Wait for any response
000076 dfc0                      							rcall UART_Receive_Byte
                                 
000077 d060                      							rcall DELAY_300ms
                                 
000078 c025                      							rjmp MAIN
                                 
                                 PC_CONN:
                                 							// AND the r13 with PORTC_MASK, all bits taken out except FN
000079 e048                      							ldi r20, PORTC_MASK - 31
00007a 22d4                      							and r13, r20
                                 
                                 							// Load the command GET_PC_STATUS or GET_DESTINATION_IP to r16 and transmit byte
00007b e003                      							ldi r16, GET_PC_STATUS
00007c 0d0d                      							add r16, r13 // result is GET_DESTINATION_IP if FN is on
00007d dfab                      							rcall UART_Transmit_Byte
                                 
                                 							// If FN is off, return
00007e 3003                      							cpi r16, 0x03
00007f f069                      							breq PC_CONN_Ret
                                 
                                 							// Toggle FN
000080 9a33                      							sbi PINC, 3
                                 
                                 							// Ignore the incoming garbage, wait for response 0xFF
000081 dfb5                      							rcall UART_Receive_Byte
000082 3f0f                      							cpi r16, 0xFF
000083 f7e9                      							brne PC-2
                                 
                                 							// Get the new destination IP and store in EEPROM 
000084 dfb9                      							rcall UART_Receive_Str
000085 e010
000086 e000
000087 930f
000088 931f
000089 dfce
00008a 911f
00008b 910f                      							eepromWrite HOST_IP_PORT
                                 
                                 							// Send destination IP
00008c d002                      							rcall IP_SYNC
                                 
00008d d04a                      	PC_CONN_Ret:			rcall DELAY_300ms
00008e c00f                      							rjmp MAIN
                                 
                                 IP_SYNC:
00008f 930f                      							push r16
                                 
                                 							// Load the command SET_DESTINATION_IP  to r16 and transmit byte
000090 e005                      							ldi r16, SET_DESTINATION_IP
000091 df97                      							rcall UART_Transmit_Byte
                                 
                                 							// Wait for any response
000092 dfa4                      							rcall UART_Receive_Byte
                                 
                                 							// Read the destination IP from EEPROM and send
000093 e010
000094 e000
000095 930f
000096 931f
000097 dfad
000098 911f
000099 910f                      							eepromRead HOST_IP_PORT
00009a df95                      							rcall UART_Transmit_Str
                                 
                                 							// Wait until any response
00009b df9b                      							rcall UART_Receive_Byte
                                 
00009c 910f                      							pop r16
00009d 9508                      							ret
                                 
                                 MAIN:
00009e 2499                      							clr r9
                                 
                                 							// Load PORTB_MASK to r20 and inverted of it to r21
00009f e34f                      							ldi r20, PORTB_MASK
0000a0 ec50                      							ldi r21, ~PORTB_MASK
                                 
                                 							// Pull the current state of PORTB to r10
0000a1 b0a3                      							in r10, PINB
                                 
                                 							// AND the r10 with PORTB_MASK and store result in r10 itself
                                 							// Expected result is 0b00111111 for PORTB if there is no pressing on switches 
0000a2 22a4                      							and r10, r20
                                 
                                 							// XOR the r10 with the inverted PORTB_MASK and XOR the result with 0
                                 							// Expected result is 0b00000000 if there is no pressing on switches
0000a3 255a                      							eor r21, r10
0000a4 2558                      							eor r21, r8
                                 
                                 							// OR the r21 with zero and store result in r9
                                 							// If there is no pressing on switches r9 stays zero
0000a5 2a95                      							or r9, r21
                                 
                                 
                                 							// Load PORTB_MASK to r20 and inverted of it to r21
0000a6 e247                      							ldi r20, PORTC_MASK
0000a7 ed58                      							ldi r21, ~PORTC_MASK
                                 
                                 							// Pull the current state of PORTC to r11 and copy the result in r13
0000a8 b0b6                      							in r11, PINC
0000a9 2cdb                      							mov r13, r11
                                 
                                 							// AND the r11 with PORTC_MASK and store result in r11 itself
                                 							// Expected result is 0b00100111 for PORTC if there is no pressing on switches
0000aa 22b4                      							and r11, r20
                                 
                                 							// XOR the r11 with the inverted PORTC_MASK and XOR the result with 0
                                 							// Expected result is 0b00000000 if there is no pressing on switches
0000ab 255b                      							eor r21, r11
0000ac 2558                      							eor r21, r8
                                 
                                 							// OR the r21 with zero and store result in r9
                                 							// If there is no pressing on switches r9 stays zero
0000ad 2a95                      							or r9, r21
                                 
                                 							
                                 							// Load PORTD_MASK to r20 and inverted of it to r21
0000ae ee4c                      							ldi r20, PORTD_MASK
0000af e153                      							ldi r21, ~PORTD_MASK
                                 
                                 							// Pull the current state of PORTD to r12
0000b0 b0c9                      							in r12, PIND
                                 
                                 							// AND the r12 with PORTD_MASK and store result in r12 itself
                                 							// Expected result is 0b11101100 for PORTC if there is no pressing on switches
0000b1 22c4                      							and r12, r20
                                 
                                 							// XOR the r12 with the inverted PORTC_MASK and XOR the result with 0
                                 							// Expected result is 0b00000000 if there is no pressing on switches
0000b2 255c                      							eor r21, r12
0000b3 2558                      							eor r21, r8
                                 
                                 							// OR the r21 with zero and store result in r9
                                 							// If there is no pressing on switches r9 stays zero
0000b4 2a95                      							or r9, r21
                                 
                                 							// If r9 is zero, there is no pressing on switches, return to loop
0000b5 2099                      							tst r9
0000b6 f339                      							breq MAIN
                                 
                                 							// Check if the pressed switch is FN
0000b7 feb1                      							sbrs r11, 1
0000b8 cfb3                      							rjmp FN_Toggle
                                 
                                 							// Check if the pressed switch is WPS
0000b9 fea4                      							sbrs r10, 4
0000ba cfb4                      							rjmp WPS
                                 
                                 							// Check if the pressed switch is PCC
0000bb fec5                      							sbrs r12, 5
0000bc cfbc                      							rjmp PC_CONN
                                 
                                 							// Load the command SEND_KEY to r16 and transmit byte
0000bd e004                      							ldi r16, SEND_KEY
0000be df6a                      							rcall UART_Transmit_Byte
0000bf df77                      							rcall UART_Receive_Byte // Wait for any response
                                 
                                 							// AND the r10 with PORTB_MASK, WPS bit taken out
0000c0 e24f                      							ldi r20, PORTB_MASK - 16
0000c1 22a4                      							and r10, r20
                                 
                                 							// AND the r11 with PORTC_MASK, FN bit taken out
0000c2 e245                      							ldi r20, PORTC_MASK - 02
0000c3 22b4                      							and r11, r20
                                 
                                 							// AND the r12 with PORTD_MASK, PCC bit taken out
0000c4 ec4c                      							ldi r20, PORTD_MASK - 32
0000c5 22c4                      							and r12, r20
                                 
                                 							// Toggle FN, if it is on
0000c6 fcd3                      							sbrc r13, 3
0000c7 9a33                      							sbi PINC, 3
                                 
                                 							// AND the r13 with PORTC_MASK, all bits taken out except FN
0000c8 e048                      							ldi r20, PORTC_MASK - 31
0000c9 22d4                      							and r13, r20
0000ca 24d8                      							eor r13, r8
                                 
                                 							// Transmit 5 bytes r10, r11, r12, r13, '\0'
0000cb 2d0a                      							mov r16, r10
0000cc df5c                      							rcall UART_Transmit_Byte
0000cd 2d0b                      							mov r16, r11
0000ce df5a                      							rcall UART_Transmit_Byte
0000cf 2d0c                      							mov r16, r12
0000d0 df58                      							rcall UART_Transmit_Byte
0000d1 2d0d                      							mov r16, r13
0000d2 df56                      							rcall UART_Transmit_Byte
0000d3 e000                      							ldi r16, '\0'
0000d4 df54                      							rcall UART_Transmit_Byte
0000d5 df61                      							rcall UART_Receive_Byte // Wait for any response
                                 
0000d6 d001                      							rcall DELAY_300ms
0000d7 cfc6                      							rjmp MAIN
                                 
                                 
                                 
                                 
                                 DELAY_300ms:
                                 
0000d8 e02c                      						    ldi  r18, 12
0000d9 e339                      						    ldi  r19, 57
0000da e749                      						    ldi  r20, 121
0000db 954a                      						L1: dec  r20
0000dc f7f1                      						    brne L1
0000dd 953a                      						    dec  r19
0000de f7e1                      						    brne L1
0000df 952a                      						    dec  r18
0000e0 f7d1                      						    brne L1
0000e1 c000                      						    rjmp PC+1
0000e2 2722                      						    clr r18
0000e3 2733                      						    clr r19
0000e4 2744                      						    clr r20
                                 
0000e5 9508                      						    ret
                                 
                                 
                                 
                                 //INT0: reti
                                 //INT1: reti
                                 //PCINT0: reti
                                 //PCINT1: reti
                                 //PCINT2: reti
                                 //WDT: reti
                                 //TIM2_COMPA: reti
                                 //TIM2_COMPB: reti
                                 //TIM2_OVF: reti
                                 //TIM1_CAPT: reti
                                 //TIM1_COMPA: reti
                                 //TIM1_COMPB: reti
                                 //TIM1_OVF: reti
                                 //TIM0_COMPA: reti
                                 //TIM0_COMPB: reti
                                 //TIM0_OVF: reti
                                 //SPI_STC: reti
                                 //UART_RXC: reti
                                 //UART_UDRE: reti
                                 //UART_TXC: reti
                                 //ADC: reti
                                 //EE_RDY: reti
                                 //ANA_COMP: reti
                                 //TWI: reti
                                 //SPM_RDY: reti
                                 
                                 .eseg
                                 
000000 31
000001 39
000002 32
000003 2e
000004 31
000005 36
000006 38
000007 2e
000008 30
000009 30
00000a 30
00000b 2e
00000c 30
00000d 30
00000e 30
00000f 3a
000010 30
000011 30
000012 30
000013 30
000014 30
000015 00                        HOST_IP_PORT: 	.db "192.168.000.000:00000" , '\0'
                                 


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega328P" register use summary:
x  :   4 y  :   2 z  :   4 r0 :   0 r1 :   0 r2 :   0 r3 :   0 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   5 r9 :   5 r10:   6 r11:   7 r12:   6 
r13:  10 r14:   0 r15:   0 r16:  59 r17:  12 r18:   3 r19:   3 r20:  21 
r21:  12 r22:   0 r23:   0 r24:   0 r25:   0 r26:   6 r27:   6 r28:   2 
r29:   2 r30:   4 r31:   4 
Registers used: 21 out of 35 (60.0%)

"ATmega328P" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   0 add   :   2 adiw  :   2 and   :   9 
andi  :   0 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :   2 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 brlt  :   0 brmi  :   0 
brne  :   9 brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   0 cbi   :   0 cbr   :   0 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :   5 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   0 cpc   :   0 
cpi   :   7 cpse  :   0 dec   :   3 eor   :   7 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :   8 inc   :   0 jmp   :   0 
ld    :   2 ldd   :   4 ldi   :  45 lds   :   3 lpm   :   0 lsl   :   0 
lsr   :   0 mov   :   6 movw  :   0 mul   :   0 muls  :   0 mulsu :   0 
neg   :   0 nop   :   0 or    :   3 ori   :   0 out   :  17 pop   :   5 
push  :   5 rcall :  30 ret   :  10 reti  :   0 rjmp  :  14 rol   :   0 
ror   :   0 sbc   :   0 sbci  :   0 sbi   :   7 sbic  :   2 sbis  :   0 
sbiw  :   0 sbr   :   0 sbrc  :   2 sbrs  :   5 sec   :   0 seh   :   0 
sei   :   0 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :   2 std   :   0 sts   :   5 
sub   :   0 subi  :   0 swap  :   0 tst   :   1 wdr   :   0 
Instructions used: 29 out of 113 (25.7%)

"ATmega328P" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0001cc    460      0    460   32768   1.4%
[.dseg] 0x000100 0x000140      0     64     64    2048   3.1%
[.eseg] 0x000000 0x000016      0     22     22    1024   2.1%

Assembly complete, 0 errors, 0 warnings
